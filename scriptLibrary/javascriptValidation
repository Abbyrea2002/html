function validateForm() {
  // Get the value of the input field with id="email"
  var email = document.getElementById("email").value;
  // Get the value of the input field with id="password"
  var password = document.getElementById("password").value;
  // Regular expression to check if the email is in the correct format
  var emailRegex = /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\.[a-zA-Z0-9-]+)*$/;
  // Check if the email is empty
  if (email == "") {
    alert("Email field must be filled out");
    return false;
  }
  // Check if the email is in the correct format
  if (!email.match(emailRegex)) {
    alert("Please enter a valid email address");
    return false;
  }
  // Check if the password is empty
  if (password == "") {
    alert("Password field must be filled out");
    return false;
  }
  // Send a request to the server to check the user's credentials
  // If the credentials are correct, return true to submit the form
  // If the credentials are incorrect, display an error message and return false to prevent the form from being submitted
  return true;
}
Download the complete source code of login form validation.

 

This function does the following:

It gets the values of the email and password input fields using the getElementById() function.
It defines a regular expression to check the format of the email.
It checks if the email or password input fields are empty.
It sends a request to the server to check the user's credentials.
If all checks pass, it returns true to submit the form. If any of the checks fail, it displays an error message and returns false to prevent the form from being submitted.
Check how to design a login registration form using HTML & CSS

Javascript Password Field Validation Steps
Here are some features that you may want to include in a JavaScript password validation function:
Minimum length: Requiring the password to be at least a certain length (e.g. 8 characters) helps ensure that the password is strong enough to resist brute force attacks.
Complexity requirements: Requiring the password to contain a mix of different character types (e.g. uppercase letters, lowercase letters, numbers, and special characters) can make it more difficult for someone to guess the password.
Password confirmation: Asking the user to enter their password a second time (in a separate field) can help ensure that the user has entered their password correctly.
Strength meter: A password strength meter is a visual indicator that shows the user how strong their password is based on certain criteria (e.g. length, complexity). This can help the user choose a stronger password.
Regular expression: A regular expression is a sequence of characters that defines a search pattern. You can use a regular expression to check that the password meets certain criteria (e.g. at least 8 characters long, with at least one uppercase letter, one lowercase letter, and one number).
Here is an example of a password validation function using JavaScript that includes some of these features:

function validatePassword() {
  // Get the value of the input field with id="password"
  var password = document.getElementById("password").value;
  // Get the value of the input field with id="passwordConfirm"
  var passwordConfirm = document.getElementById("passwordConfirm").value;
  // Regular expression to check if the password is strong enough
  var passwordRegex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)[a-zA-Z\d]{8,}$/;
  // Check if the password is empty
  if (password == "") {
    alert("Password field must be filled out");
    return false;
  }
  // Check if the password is strong enough
  if (!password.match(passwordRegex)) {
    alert("Password must be at least 8 characters long and contain at least one lowercase letter, one uppercase letter, and one number");
    return false;
  }
  // Check if the password confirmation is empty
  if (passwordConfirm == "") {
    alert("Password confirmation field must be filled out");
    return false;
  }
  // Check if the passwords match
  if (password != passwordConfirm) {
    alert("Passwords do not match");
    return false;
  }
  // If all checks pass, return true
  return true;
}
Download the complete source code of login form validation.


This function does the following:

It gets the values of the password and password confirmation input fields using the getElementById() function.
It defines a regular expression to check the strength of the password.
It checks if the password or password confirmation input fields are empty.
It checks if the passwords match.
If all checks pass, it returns true. If any of the checks fail, it displays an error message and returns false.
Javascript Email Validation Steps
Here are the steps you can follow to validate an email address in JavaScript:

 

Create a regular expression that matches the pattern of a valid email address. This regular expression should check for the following:
The email address must contain one or more characters before the @ symbol.
The email address must contain a single @ symbol.
The email address must contain one or more characters after the @ symbol but before the. symbol.
The email address must contain a single. symbol, followed by one or more characters.
Create a function that takes an email address as an argument and uses the regular expression to check if the email address is in the correct format.
Call the function and pass it to the email address you want to validate.
If the function returns true, the email address is in the correct format. If it returns false, the email address is not in the correct format.
Here is an example of how you can implement this in JavaScript: 

 

function validateEmail(email) {
  var re = /^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
  return re.test(email);
}

var email = "test@example.com";
if (validateEmail(email)) {
  console.log("Valid email address");
} else {
  console.log("Invalid email address");
}
Download the complete source code of login form validation.

 

Note that this regular expression is not a perfect solution and may not catch all invalid email addresses. It is also important to note that validating an email address on the client side using JavaScript does not guarantee that the email address is actually valid. It is always a good idea to validate email addresses on the server side as well.



Still you face problems, feel free to contact with me, I will try my best to help you.
Search Post (Max:65,Min:3 Characters)

    

üìñ You should learn Also üòç

How to create popup modal or popup message box with time countdown in javascript
Simple JavaScript project with source code | Unit Converter

How to select CSS pseudo element using javaScript
Simple JavaScript Project with source code | Digital clock

Email validation on javascript with source code
javascript filter table row single and multiple columns

JavaScript Simple Projects With Source Code - Temperature Converter
JavaScript Simple Projects With Source Code - Length Converter

JavaScript Simple Projects With Source Code - Percentage Calculator

popup modal-time-countdown
unit converter

select CSS-pseudo element
javascript digital-clock

Email validation-on-javascript
javascript table-filter-all-column
javascript projects-temperature-calculator
javascript projects-length-converter
javascript projects-percentage-calculator
‚õΩ CONTACT ‚úç ABOUT US ‚òï WORK WITH US üîó TERMS AND CONDITION üîí PRIVACY POLICY ‚ù§ PROJECTS WITH SOURCE CODE
¬© ALL RIGHTS RESERVED. INSIDETHEDIV 2021.


